https://leetcode.com/problems/min-cost-climbing-stairs/

// RECURSSION

class Solution {
public:
    int fun(int ind,vector<int> &cost){
        //since its given we can either start from index 0 or index 1
        if(ind <= 1)return 0;
        
        int cost1 = fun(ind-1,cost) + cost[ind-1];
        int cost2 = fun(ind-2,cost) + cost[ind-2];
        
        return min(cost1,cost2);
    }
    
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        return fun(n,cost);
    }
};

// MEMOIZATION

class Solution {
public:
    int fun(int ind,vector<int> &cost,vector<int> &dp){
        //since its given we can either start from index 0 or index 1
        if(ind <= 1)return 0;
        if(dp[ind] != -1)return dp[ind];
        
        int cost1 = fun(ind-1,cost,dp) + cost[ind-1];
        int cost2 = fun(ind-2,cost,dp) + cost[ind-2];
        
        return dp[ind] = min(cost1,cost2);
    }
    
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int>dp(n+1,-1);
        return fun(n,cost,dp);
    }
};


// TABULATION

class Solution {
public:
        int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int>dp(n+1,-1);
        
        dp[0] = 0;
        dp[1] = 0;
        
        for(int i=2;i<=n;i++){
            int cost1 = dp[i-1] + cost[i-1];
            int cost2 = dp[i-2] + cost[i-2];
            dp[i] = min(cost1,cost2);
        }
        return dp[n];//since its given we can either start from index 0 or index 1
    }
};


// SPACE OPTIMIZATION

class Solution {
public:
        int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        int prev=0;int curr=0;
        for(int i=2;i<=n;i++){
            int cost1 = prev+cost[i-1];
            int cost2 = curr+cost[i-2];
            int ans = min(cost1,cost2); 
            curr=prev;
            prev=ans;
        }
        return prev ;//since its given we can either start from index 0 or index 1
    }
};
