https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=1

bool fun(int ind,int target,vector<int> &arr){
    if(target == 0)return true;
    if(ind == 0)return (arr[0] == target);
    
    bool notTake = fun(ind-1,target,arr);
    bool Take = false;
    if(arr[ind] <= target)Take = fun(ind-1,target-arr[ind],arr);
    
    return Take || notTake;
   }

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    return fun(n-1,k,arr);
}


Approach 2 : Memoization
T.c -> o(n *  target)
S.c -> o(n * target) + o(n)

bool fun(int ind,int target,vector<int> &arr,vector<vector<int>> &dp){
    if(target == 0)return true;
    if(ind == 0)return (arr[0] == target);
    
    if(dp[ind][target] != -1)return dp[ind][target];
    
    bool notTake = fun(ind-1,target,arr,dp);
    bool Take = false;
    if(arr[ind] <= target)Take = fun(ind-1,target-arr[ind],arr,dp);
    
    return dp[ind][target] =  Take || notTake;
   }

bool subsetSumToK(int n, int k, vector<int> &arr) {
    
    vector<vector<int>>dp(n,vector<int>(k+1,-1));
    return fun(n-1,k,arr,dp);
}


Approach 3 : Tabuluation
T.c -> o(n *  target)
S.c -> o(n * target)

bool subsetSumToK(int n, int k, vector<int> &arr) {
    
    vector<vector<bool>>dp(n,vector<bool>(k+1,0));
    
    for(int i=0;i<n;i++)dp[i][0] = true;
    dp[0][arr[0]] = true;
    
    for(int ind=1;ind<n;ind++){
        for(int target=1;target<=k;target++){
            bool notTake = dp[ind-1][target];
            bool Take = false;
            if(arr[ind] <= target)Take = dp[ind-1][target-arr[ind]];
    
            dp[ind][target] =  Take || notTake;
        }
    }
    return dp[n-1][k];
}


Approach 4 : Space optimization
T.c -> o(n *  target)
S.c -> o(k)

bool subsetSumToK(int n, int k, vector<int> &arr) {
    
    vector<bool>prev(k+1,0);
    vector<bool>curr(k+1,0);
    
    prev[0]=curr[0]=true;   
    
    prev[arr[0]] = true;
    
    for(int ind=1;ind<n;ind++){
        for(int target=1;target<=k;target++){
            bool notTake = prev[target];
            bool Take = false;
            if(arr[ind] <= target)Take = prev[target-arr[ind]];
    
            curr[target] =  Take || notTake;
        }
        prev = curr;
    }
    return prev[k];
}
