//Memoization

class Solution {
public:     
   bool fun(int index,int target,vector<int> &nums,vector<vector<int>> &dp){
        if(target == 0) return true;
        if(index == 0){
          if(target-nums[index] == 0) return true;
            return false;
        }
        if(dp[index][target]!=-1) return dp[index][target];
       
        bool notTake = fun(index-1,target,nums,dp);
        bool take = false;
        if(nums[index]<=target){
            take = fun(index-1, target-nums[index],nums,dp);
        }
        return dp[index][target] = notTake || take;
    }
    
    //This question boils down to finding target in the array
    bool canPartition(vector<int>& nums) {
    int n = nums.size();
    int totSum = 0;
    for(int i=0;i<n;i++)totSum += nums[i];
     
    if(totSum%2 != 0)return false;
    int target = totSum/2;
    
    vector<vector<int>> dp(n,vector<int>(target+1,-1));
        
    return fun(n-1,target,nums,dp);
    
    }
};
