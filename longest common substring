APPROACH : TABULATION(follow longest common subsequence)
/*tabulation method will be same as finding longest common subsequence,here we just check if two strings matches add that length to dp array and thus store 
  ans by finding maxi of dp[] and ans if two indexes do not match then make it to 0*/

#include <bits/stdc++.h> 
int lcs(string &s, string &t){
	int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    //base case converting if(i == 0 || j == 0) int two for loops
    for(int i=0;i<=n;i++)dp[i][0] = 0;
    for(int j=0;j<=m;j++)dp[0][j] = 0;
    
    int ans = 0;
    
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
            if(s[ind1-1] == t[ind2-1]){ 
                //if strings matches
                dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                ans = max(ans,dp[ind1][ind2]);
            }
            //if strings do not match
            else dp[ind1][ind2] = 0;
        }
    }
    return ans;
}


APPROACH:  SPACE OPTIMIZATION(here we are ignoring first two for loops which is base case still it runs because it has nothing to do with that as we are only 
                               required two arrays that is prev and curr and accordingly they fill themselves)

#include <bits/stdc++.h> 
int lcs(string &s, string &t){
	int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<int>prev(m+1,0),curr(m+1,0);
    //base case converting if(i == 0 || j == 0) int two for loops
 //   for(int i=0;i<=n;i++)dp[i][0] = 0;
 //   for(int j=0;j<=m;j++)dp[0][j] = 0;
    
    int ans = 0;
    
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
            if(s[ind1-1] == t[ind2-1]){ 
                //if strings matches
                curr[ind2] = 1 + prev[ind2-1];
                ans = max(ans,curr[ind2]);
            }
            //if strings do not match
            else curr[ind2] = 0;
        }
        prev = curr;
    }
    return ans;
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
APPROACH:  SPACE OPTIMIZATION(replacinf dp[ind] -> curr    and dp[ind-1] ->  prev) 


#include <bits/stdc++.h> 
int lcs(string &s, string &t){
	int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<int>prev(m+1,0),curr(m+1,0);
    //base case converting if(i == 0 || j == 0) int two for loops
    for(int i=0;i<=n;i++)curr[0] = 0;
    for(int j=0;j<=m;j++)curr[j] = 0;
    
    int ans = 0;
    
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
            if(s[ind1-1] == t[ind2-1]){ 
                //if strings matches
                curr[ind2] = 1 + prev[ind2-1];
                ans = max(ans,curr[ind2]);
            }
            //if strings do not match
            else curr[ind2] = 0;
        }
        prev = curr;
    }
    return ans;
}
