Approach 1(Recurssion)
T.c - > o(2^m*n) here we have exponential time 
s.c -> o((m-1,n-1)*(n*m) here m-1,n-1 is path length

#include <bits/stdc++.h> 
int count(int i,int j){
    if(i==0 && j==0)return 1;
    if(i < 0 || j < 0)return 0;
    
   int up = count(i-1, j);
   int left = count(i, j-1);

   return up + left;
}

int uniquePaths(int m, int n) {
    return count(m-1,n-1);
}


Approach 2(Memoization)
T.c - > o(n*m)
s.c -> o((m-1,n-1)*(n*m) here m-1,n-1 is path length and n*m is dp size

#include <bits/stdc++.h> 
int count(int i,int j,vector<vector<int>> &dp){
    if(i==0 && j==0)return 1;
    if(i < 0 || j < 0)return 0;
    if(dp[i][j] != -1)return dp[i][j];
    
   int up = count(i-1, j, dp);
   int left = count(i, j-1, dp);
    
    return dp[i][j] = up + left;
}

int uniquePaths(int m, int n) {
    vector<vector<int>> dp(m,vector<int>(n,-1));
    return count(m-1,n-1,dp);
}


Approach 3(Tabulation)
T.c - > o(n*m)
s.c -> o(n*m) 

#include <bits/stdc++.h> 
int uniquePaths(int m, int n) {
   vector<vector<int>>dp(m,vector<int>(n,-1));
   for(int i=0;i<m;i++){
       for(int j=0;j<n;j++){
           if(i==0 && j==0){
               dp[i][j]=1;
               continue;
           }
           else{
           int up = 0;
           int left = 0;
           if(i > 0)up = up + dp[i-1][j];
           if(j > 0)left = left + dp[i][j-1];
           
           dp[i][j] = up + left;
           }
       }
   }
    return dp[m-1][n-1];
}


Approach 4(Space Optimization)
T.c - > o(n*m)
s.c -> o(n*m) 


#include <bits/stdc++.h> 
int uniquePaths(int m, int n) {
  vector<int>prev(n,0);
  for(int i=0;i<m;i++){
      vector<int>curr(n,0);
      for(int j=0;j<n;j++){
          if(i==0 && j==0){
              curr[j] = 1;
              continue;
          }
          else{
              int up = 0 ;
              int left = 0;
              if(i > 0)up = prev[j];
              if(j > 0)left = curr[j-1];
              
              curr[j] = up + left;
          }
      }
      prev = curr; 
  }
    return prev[n-1];   
}
