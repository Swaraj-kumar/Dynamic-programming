Approach 1-> Recurssion
T.c and s.c for this is similar to the unique paths refer that...

#include<bits/stdc++.h>
int mod = (int) (1e9 + 7);
int fun(int i, int j, vector< vector< int> > &mat){
    if(i >= 0 && j >= 0 && mat[i][j] == -1)return 0;
    if(i==0 && j==0)return 1;
    if(i < 0 || j < 0)return 0;
     
    int up = fun(i-1,j,mat);
    int left = fun(i,j-1,mat);
    
    return (up + left) % mod;
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    return fun(n-1,m-1,mat);
}


Approach 2-> Memoization
T.c and s.c for this is similar to the unique paths refer that...


#include<bits/stdc++.h>
int mod = (int) (1e9 + 7);
int fun(int i, int j, vector< vector< int> > &mat,vector< vector< int> > &dp){
    if(i >= 0 && j >= 0 && mat[i][j] == -1)return 0;
    if(i==0 && j==0)return 1;
    if(i < 0 || j < 0)return 0;
     
    if(dp[i][j] != -1)return dp[i][j];
    
    int up = fun(i-1,j,mat,dp);
    int left = fun(i,j-1,mat,dp);
     
    return dp[i][j] = (up + left) % mod;
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
     vector<vector<int>>dp(n,vector<int>(m,-1));
    return fun(n-1,m-1,mat,dp);
}


Approach 3-> Tabulation
T.c and s.c for this is similar to the unique paths refer that...

#include<bits/stdc++.h>
int mod = (int) (1e9 + 7);
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
   vector<vector<int>>dp(n,vector<int>(m,-1));
   for(int i=0;i<n;i++){
       for(int j=0;j<m;j++){
           if(mat[i][j] == -1)dp[i][j] = 0;
          else if(i==0 && j==0){
               dp[i][j]=1;
               continue;
           }
           else{
           int up = 0;
           int left = 0;
           if(i > 0)up = up + dp[i-1][j];
           if(j > 0)left = left + dp[i][j-1];
           
           dp[i][j] = (up + left) % mod;
           }
       }
   }
    return dp[n-1][m-1];
}

Approach 4-> Space optimization
T.c and s.c for this is similar to the unique paths refer that...


#include<bits/stdc++.h>
int mod = (int) (1e9 + 7);
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    vector<int>prev(m,0);
  for(int i=0;i<n;i++){
      vector<int>curr(m,0);
      for(int j=0;j<m;j++){
          if(mat[i][j] == -1)curr[j] = 0;
         else if(i==0 && j==0){
              curr[j] = 1;
              continue;
          }
          else{
              int up = 0 ;
              int left = 0;
              if(i > 0)up = prev[j];
              if(j > 0)left = curr[j-1];
              
              curr[j] = (up + left) % mod;
          }
      }
      prev = curr; 
  }
    return prev[m-1];   
}
