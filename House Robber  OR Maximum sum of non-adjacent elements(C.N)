//Approach1 -> Recurssion
//T.c -> o(2^e)
//s.c->o(n)

class Solution {
public:
    int fun(int indx, vector<int> &nums){
        //if we are going to negative index return 0 then
        if(indx < 0)return 0;
        //if we have reached indx 0  then return the value of that particular index
        if(indx == 0)return nums[indx];
        
        
        //since we have to pick up non adjacent element
        int pick = fun(indx-2,nums) + nums[indx]; 
        //we skip adjacent houses by adding value 0 to it
        int notPick = fun(indx-1,nums) + 0;
        //we have to find maximum of pick and non pick elements 
        return max(pick,notPick);
    }
    
    int rob(vector<int>& nums) {
        int n = nums.size();
        return fun(n-1,nums);
    }
};
    
//Approach2 -> DP (Memoization)
//T.c -> o(n)
//s.c->o(n)+o(n)


class Solution {
public:
    int fun(int indx, vector<int> &nums,vector<int> &dp){
        //if we are going to negative index return 0 then
        if(indx < 0)return 0;
        //if we have reached indx 0  then return the value of that particular index
        if(indx == 0)return nums[indx];
        if(dp[indx] != -1)return dp[indx];
        
        //since we have to pick up non adjacent element
        int pick = fun(indx-2,nums,dp) + nums[indx]; 
        //we skip adjacent houses by adding value 0 to it
        int notPick = fun(indx-1,nums,dp) + 0;
        //we have to find maximum of pick and non pick elements 
        return dp[indx] = max(pick,notPick);
    }
    
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int>dp(n+1,-1);
        return fun(n-1,nums,dp);
    }
};
    
//Approach3 -> DP (Tabulation)
//T.c -> o(n)
//s.c->o(n)

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int>dp(n+1,-1);
        //base case
        dp[0] = nums[0];
        
        for(int i=1;i<n;i++){
            int pick = nums[i];
            if(i>1){
            pick = dp[i-2] + nums[i];
            }
            int notPick = dp[i-1] + 0;
            
            dp[i] = max(pick,notPick);
        }
        return dp[n-1];
    }
};

// Approach4 -> SPACE OPTIMIZATION

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        //base case
        int prev1 = nums[0];
        int prev2 = 0;
        for(int i=1;i<n;i++){
            int pick = prev1;
            if(i>1){
            pick = nums[i] + prev2;
            }
            int notPick = 0 + prev1;
            
            int curr = max(pick,notPick);
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
};
