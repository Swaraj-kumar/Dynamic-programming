https://www.codingninjas.com/codestudio/problems/longest-common-subsequence_624879?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

APPROACH 1 : RECURSSION
T.c -> o(2^n * 2^n)
s.c -> A.S.S

#include<bits/stdc++.h>

int fun(int ind1,int ind2,string &s,string &t){
    //if either of the two indexes reaches negative then return 0
    if(ind1 < 0 || ind2 < 0)return 0;
    //check whether two strings are equal or not 
    //if its equal then reduce the size of both the index as it matches
    //and thus increase the count
    if(s[ind1] == t[ind2])return 1 + fun(ind1-1,ind2-1,s,t);
    //other wise count will be 0 and ind1 and ind2 will interchangebly change
    return 0 + max(fun(ind1-1,ind2,s,t),fun(ind1,ind2-1,s,t));
}

int lcs(string s, string t){
    int n = s.size();
    int m = t.size();
    return fun(n-1,m-1,s,t);
}


APPROACH 2 : MEMOIZATION
T.c -> o(n*m)
s.c -> o(n*m)(n*m)

#include<bits/stdc++.h>

int fun(int ind1,int ind2,string &s,string &t,vector<vector<int>> &dp){
    //here we are considering right shift in order to make sure whether either of indexes are 0 if yes then return 0
    if(ind1 == 0 || ind2 == 0)return 0;

    if(dp[ind1][ind2] != -1)return dp[ind1][ind2];
    
    if(s[ind1-1] == t[ind2-1])return dp[ind1][ind2] = 1 + fun(ind1-1,ind2-1,s,t,dp);
 
    return dp[ind1][ind2] = 0 + max(fun(ind1-1,ind2,s,t,dp),fun(ind1,ind2-1,s,t,dp));
}

int lcs(string s, string t){
    int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
    //fun call will take place till f(n) which indicates f(n-1) and f(m) which indicates f(m-1)
    return fun(n,m,s,t,dp);
}


APPROACH 3 : TABULATION
T.c -> o(n*m)
s.c -> o(n*m)

#include<bits/stdc++.h>
int lcs(string s, string t){
    int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    //base case converting if(i == 0 || j == 0) int two for loops
    for(int i=0;i<=n;i++)dp[i][0] = 0;
    for(int j=0;j<=m;j++)dp[0][j] = 0;
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
             if(s[ind1-1] == t[ind2-1]) dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
 
             else dp[ind1][ind2] = 0 + max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
        }
    }
    return dp[n][m];
}


APPROACH 5 : SPACE OPTIMIZATION(using 2D array)
T.c -> o(n*m)
s.c -> o(n)


#include<bits/stdc++.h>
int lcs(string s, string t){
    int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<int>prev(m+1,0),curr(m+1,0);
    //base case converting if(i == 0 || j == 0) int two for loops
    for(int i=0;i<=n;i++)prev[0] = 0;
    for(int j=0;j<=m;j++)prev[j] = 0;
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
             if(s[ind1-1] == t[ind2-1]) curr[ind2] = 1 + prev[ind2-1];
 
             else curr[ind2] = 0 + max(prev[ind2],curr[ind2-1]);
        }
        prev = curr;
    }
    return prev[m];
}


APPROACH 5 : SPACE OPTIMIZATION(using single array)
T.c -> o(n*m)
s.c -> o(n)

#include<bits/stdc++.h>
int lcs(string s, string t){
    int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<int>prev(n+1,0);
    //base case converting if(i == 0 || j == 0) int two for loops
    for(int i=0;i<=n;i++)prev[0] = 0;
    for(int j=0;j<=m;j++)prev[j] = 0;
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
             if(s[ind1-1] == t[ind2-1]) prev[ind2] = 1 + prev[ind2-1];
 
             else prev[ind2] = 0 + max(prev[ind2],prev[ind2-1]);
        }
    }
    return prev[m];
}
