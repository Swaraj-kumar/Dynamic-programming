https://leetcode.com/problems/climbing-stairs/submissions/

// This problem is exactly similar to fibonaci number

//RECURSSION T.c -> o(2^n) {recurssion calls}  s.c -> o(n){stack space}

/*class Solution {
public:
    int climbStairs(int n) {
        //if we are at index 0 that means we have reached destination
        if(n == 0)return 1;
        //if is 1 and fun(n-1)-> 0 + fun(1-2) -> -1 to prevent from -ve index we write below case
        if(n == 1)return 1;
        //similar to fibonacci
        return climbStairs(n-1) + climbStairs(n-2);
    }
};*/

// MEMOIZATION T.c -> o(n) {}  s.c -> o(n){recurssive stack space} + o(n){dp[]}

/*class Solution {
public:
    int fun(vector<int> &dp, int n){
        if(n == 0)return 1;
        if(n == 1)return 1;
        
        if(dp[n] != -1)return dp[n];
        
        return dp[n] = fun(dp,n-1) + fun(dp,n-2);
    }
    
    int climbStairs(int n) {
        vector<int>dp(n+1,-1);
        return fun(dp,n);
    }
};*/

// TABULATION  T.c -> o(n) {for loop}  s.c -> o(n)

/*class Solution {
public:
    int climbStairs(int n) {
        vector<int>dp(n+1,-1);
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};*/


// SPACE OPTIMIZATION T.c -> o(n) {for loop}  s.c -> o(1)


/*class Solution {
public:
    int climbStairs(int n) {
        int prev1 = 1;
        int prev2 = 1;
        
        for(int i=2;i<=n;i++){
            int temp = prev1 + prev2;
            prev1 = prev2;
            prev2 = temp;
        }
        return prev2;
    }
};*/
