APPROACH -1 (Recurssion) 
T.c -> Exponential
S.c -> o(w)

#include <bits/stdc++.h> 
 int fun(int ind,int w, vector<int> &val, vector<int> &weight){
     if(ind == 0){
         return ((int)(w/weight[0])*val[0]);
     }
     
     int notTake = 0 + fun(ind-1,w,val,weight);
     int take = INT_MIN;
     if(weight[ind] <= w)take = val[ind] + fun(ind,w-weight[ind],val,weight);
     return max(take,notTake);
 }
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    return fun(n-1,w,profit,weight); 
}


APPROACH -2 (Memoization) 
T.c -> o(n*w)
S.c -> o(n*w) + o(n)

#include <bits/stdc++.h> 
 int fun(int ind,int w, vector<int> &val, vector<int> &weight,vector<vector<int>>dp){
     if(ind == 0){
         return ((int)(w/weight[0])*val[0]);
     }
     
     if(dp[ind][w] != -1)return dp[ind][w];
     
     int notTake = 0 + fun(ind-1,w,val,weight,dp);
     int take = INT_MIN;
     if(weight[ind] <= w)take = val[ind] + fun(ind,w-weight[ind],val,weight,dp);
     return dp[ind][w] = max(take,notTake);
 }
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    vector<vector<int>>dp(n,vector<int>(w+1,-1));
    return fun(n-1,w,profit,weight,dp); 
}


APPROACH -3 (Tabulation) 
T.c -> o(n*w)
S.c -> o(n*w) 

#include <bits/stdc++.h> 
int unboundedKnapsack(int n, int W, vector<int> &val, vector<int> &wt){
   vector<vector<int>> dp(n,vector<int>(W+1,0));
   for(int i=wt[0]; i<=W; i++){
     dp[0][i] = ((int) (i/wt[0] * val[0]));
    }
    
    for(int ind=1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){  
            int notTaken = 0 + dp[ind-1][cap];
            int taken = INT_MIN;
            if(wt[ind] <= cap)taken = val[ind] + dp[ind][cap - wt[ind]];
            dp[ind][cap] = max(notTaken, taken);
        }
    }
    return dp[n-1][W];
}


APPROACH -4 (space optimization) 
T.c -> o(n*w)
S.c -> o(w) 


#include <bits/stdc++.h> 
int unboundedKnapsack(int n, int W, vector<int> &val, vector<int> &wt){
   vector<int>prev(W+1,0),curr(W+1,0);
   for(int i=wt[0]; i<=W; i++){
     prev[i] = ((int) (i/wt[0] * val[0]));
    }
    
    for(int ind=1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){  
            int notTaken = 0 + prev[cap];
            int taken = INT_MIN;
            if(wt[ind] <= cap)taken = val[ind] + prev[cap - wt[ind]];
            prev[cap] = max(notTaken, taken);
        }
    }
    return prev[W];
}
