https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

//Approach 1(Recurssive)

#include<bits/stdc++.h>
int fun(int index,vector<int> &heights){
    if(index == 0)return 0;
    int left = fun(index-1,heights) + abs(heights[index] - heights[index-1]);
    int right = INT_MAX;
    if(index > 1)right = fun(index-2,heights) + abs(heights[index] - heights[index-2]);
    return min(left,right);
}

int frogJump(int n, vector<int> &heights)
{
    return fun(n-1,heights);    
}

//Approach 2(DP-Memoization)   
//T.c-> o(n)
//S.c-> o(n) + o(n)

#include<bits/stdc++.h>
int fun(int index,vector<int> &heights,vector<int> &dp){
    if(index == 0)return 0;
    if(dp[index] != -1)return dp[index];
    int left = fun(index-1,heights,dp) + abs(heights[index] - heights[index-1]);
    int right = INT_MAX;
    if(index > 1)right = fun(index-2,heights,dp) + abs(heights[index] - heights[index-2]);
    return dp[index]=min(left,right);
}

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n+1,-1);
    return fun(n-1,heights,dp);    
}

//Approach 3(DP-Tabulation)   
//T.c-> o(n)
//S.c-> o(n) 

#include<bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n,0);
     dp[0] = 0;
    for(int i=1;i<n;i++){
        int left = dp[i-1] + abs(heights[i] - heights[i-1]);
        int right = INT_MAX;
        if(i>1)right = dp[i-2] + abs(heights[i] - heights[i-2]);
        
        dp[i]  = min(left,right);
    }
    return dp[n-1];
}


//Approach 4(DP-Space Optimization)   
//T.c-> o(n)
//S.c-> o(1) 

#include<bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    int prev1 = 0;
    int prev2 = 0;
    for(int i=1;i<n;i++){
        int left = prev1 + abs(heights[i] - heights[i-1]);
        int right = INT_MAX;
        if(i>1) right = prev2 + abs(heights[i] - heights[i-2]);
        
        int curr = min(left,right);
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}
