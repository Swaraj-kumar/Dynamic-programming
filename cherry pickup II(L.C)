/*Approach 1 -> Recurssion
T.c -> Exponential
S.C -> O(N) + O(N*M*M)*/


class Solution {
public:
int fun(int i,int j1,int j2,int n,int m,vector<vector<int>> &grid){
    if(j1 < 0 || j2 < 0 || j1 >= m || j2 >= m)return -1e9;
    if(i == n-1){
        if(j1==j2)return grid[i][j1];
        else
        return grid[i][j1] + grid[i][j2];
    }
    

    
    int maxi = -1e9;
    int ans;
    
    for(int di=-1;di<=1;di++){
        for(int dj=-1;dj<=1;dj++){
            if(j1==j2)
                ans = grid[i][j1] + fun(i+1,di+j1,dj+j2,n,m,grid);
            else
                ans = grid[i][j1] + grid[i][j2] + fun(i+1,di+j1,dj+j2,n,m,grid);
            
            maxi = max(maxi,ans);
        }
    }
    return maxi;
}

    
    int cherryPickup(vector<vector<int>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
   
    //source points of two robots are: (0,0) and (0,m-1)    
    return fun(0,0,m-1,n,m,grid);
    }
};



/*Approach 2 -> Memoization
T.c -> O(N*M*M) * 9
S.C -> O(N) + O(N*M*M)*/

class Solution {
public:
    int fun(int i,int j1,int j2,int n,int m,vector<vector<int>>& grid,vector<vector<vector<int>>> &dp){
        //Boundary check will occur only for left and right diagonals
        if(j1 < 0 || j1 >= m || j2 < 0 || j2 >= m)return -1e9;
        /*se case : if we have reached destination then we have two cases occuring either both A and B takes same grid then only
                      one time grid will be counted else it will be counted twice */
        if(i == n-1){
            if(j1 == j2)return grid[i][j1];
            else return grid[i][j1] + grid[i][j2];
        }
        
        if(dp[i][j1][j2] != -1)return dp[i][j1][j2];
        
        int maxi = -1e9;
        int ans;
        
    /* There will be 9 combos movements for both A and B so movements will be like: [-1,0,1] so run for loop to traverse 9 combos*/
        for(int di=-1;di<=1;di++){
            for(int dj=-1;dj<=1;dj++){
                if(j1 == j2)
                    ans = grid[i][j1] + fun(i+1,j1+di,j2+dj,n,m,grid,dp);
                else 
                    ans = grid[i][j1] + grid[i][j2] + fun(i+1,j1+di,j2+dj,n,m,grid,dp);
                
                maxi = max(maxi,ans);
            }
        }
        return dp[i][j1][j2] = maxi;
    }
    
    int cherryPickup(vector<vector<int>>& grid) {
    int n = grid.size();
    int m = grid[0].size();
    //Declaring 3-D vector as we are moving two steps at a time   
    vector<vector<vector<int>>> dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
    //source points of two robots are: (0,0) and (0,m-1)    
    return fun(0,0,m-1,n,m,grid,dp);
    }
};



