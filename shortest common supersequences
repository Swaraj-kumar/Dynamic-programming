#include <bits/stdc++.h> 
string shortestSupersequence(string s, string t){
	int n = s.size();
    int m = t.size();
    //size of dp will be n+1 and m+1 as its taken 1 index lower
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    //base case converting if(i == 0 || j == 0) int two for loops
    for(int i=0;i<=n;i++)dp[i][0] = 0;
    for(int j=0;j<=m;j++)dp[0][j] = 0;
    //loop starts from index 1 ase 0 is done 
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
             if(s[ind1-1] == t[ind2-1]) dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
 
             else dp[ind1][ind2] = 0 + max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
        }
    }
    
    //To store the ans 
    string ans = "";
    //starting from last
    int i=n,j=m;
    //This loop stores ans till i & j is greater
    while(i > 0 && j > 0){
        //if both string matches we include in ans
        if(s[i-1] == t[j-1]){
            ans += s[i-1];
            i--,j--;
        }
        //if prev guy value is greater than curr guy add to ans for string s and decrement i
        else if(dp[i-1][j] > dp[i][j-1]){
         ans += s[i-1];
         i--;   
        }
    //else if prev guy value is lesser than curr guy add to ans for string t and decrement j
        else{
         ans += t[j-1];
         j--;
        }
    }
    
    //handling the edge cases like if it reaches the outer grid like (0,2) then ans will store the remaining strings
    while(i > 0){
        ans += s[i-1];
        i--;
    }
    while(j > 0){
        ans += t[j-1];
        j--;
    }
    //at last reverse the string to get the ans
    reverse(ans.begin(),ans.end());
    return ans;
}
