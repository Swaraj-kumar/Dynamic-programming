#include <bits/stdc++.h>
using namespace std;

// APPROACH 1 ->  Using Recurssion 
// T.C-> o(n) s.c-> o(n)

/*int fib(int n){
    if(n<=1)return n;
    return fib(n-1)+fib(n-2);
}

int main() {
	int n;
	cin>>n;
	cout<<fib(n);
	return 0;
}*/


// APPROACH 2 ->  Using DP(memoization)
// T.C-> o(n) s.c-> o(n) + o(n)

/*int fib(int n,vector<int> &dp){
    if(n<=1)return n;
    if(dp[n] != -1)return dp[n];
    return dp[n] = fib(n-1,dp) + fib(n-2,dp);
}
int main(){
    int n;
    cin>>n;
    vector<int>dp(n+1,-1);
    cout<<fib(n,dp);
    return 0;
}*/

// APPROACH 3-> using Dp(tabulation)
// T.C-> o(n) s.c-> o(n)

/*int main(){
    int n;
    cin>>n;
    vector<int>dp(n+1);
    dp[0] = 0;
    dp[1] = 1;
    for(int i=2;i<=n;i++){
        dp[i] = dp[i-1] + dp[i-2];
    }
    cout<<dp[n];
    return 0;
}*/

// APPROACH 4: using Dp(tabulation) -> most optimised approach
// T.c - > o(n) s.c-> o(1)
/*  0      1      1     2   3   5..........
prev2    prev1   curr

curr = 0 + 1 ----> 1 
prev2  = 1
prev1 = 1
ans so on.....*/

/*int main(){
    int n;
    cin>>n;
    int prev1 = 1;
    int prev2 = 0;
    for(int i=2;i<=n;i++){
        int curr = prev1 + prev2;
        prev2 = prev1;
        prev1 = curr;
    }
    cout<<prev1;
    return 0;
}*/
