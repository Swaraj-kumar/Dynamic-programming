//RECURSSIVE T.c -> o(2^n)  S.c -> o(n) 

/*class Solution {
public:
    int fib(int n) {
        if(n<=1)return n;
        return fib(n-1)+fib(n-2);
    }
};*/

//MEMOIZATION T.c-> o(n) s.c-> o(n){this is for dp[]} + o(n){this is for recurssion stack space}

/*class Solution {
public:
    int fun(vector<int> &dp, int n){
        if(n <= 1)return n;
        if(dp[n] != -1)return dp[n];
        return dp[n] = fun(dp,n-1) + fun(dp,n-2);
    }
    
    int fib(int n) {
        vector<int>dp(n+1,-1);
        return fun(dp,n);
    }
};*/

// TABULATION T.c -> o(n){loop} s.c -> o(n){Dp array}
//In tabulation always try with base case figure it out then move towards other cases

/*class Solution {
public:
    int fib(int n) {
        vector<int>dp(n+1,0);
         dp[0] = 0;
         dp[1] = 1;
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};*/

class Solution {
public:
    int fib(int n) {
        //base case
        if(n <= 1)return n;
        //fibonacci starts from 0 1 1 2 3 5....
        int prev1 = 0;
        int prev2 = 1;
        for(int i=2;i<=n;i++){
            int curr = prev1 + prev2;
            prev1 = prev2;
            prev2 = curr;
        }
        return prev2;
    }
};

// 0    1  1  2  3
// 0    1  2  3  4
// p1  p2
